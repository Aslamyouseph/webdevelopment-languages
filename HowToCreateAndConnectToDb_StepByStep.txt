+--------+
| step 1 | 
+--------+

=> create a html file :- In this file indicate the action and method (action is referred to what happen after the form submission).
and the method is want to be post .
EG :   action="/signupSubmit" method="post"


+--------+
| step 2 | 
+--------+

=>Import the required libraries.With the help of this libraries only we can able to perform the further operations

Eg :const express = require("express");
const mongoose = require("mongoose");
const path = require("path");
const { check, validationResult } = require("express-validator"); :- This is used to validate the data (useful in step 8)
const app = express();


+--------+
| step 3 | 
+--------+

=>Access the middleware needed .When a form is submitted using the POST method with action="url" and method="POST", the form data is sent like  a URL format.
So it needed to fetch the data from the form. then only this data will available in req.body.

Eg: app.use(express.urlencoded({ extended: true }));


+--------+
| step 4 | 
+--------+

=>connect to the database

Eg :mongoose.connect("mongodb://localhost:27017/mydatabase", {
useNewUrlParser: true,
useUnifiedTopology: true,
})
.then(() => {
console.log("Connected to MongoDB");
})
.catch((error) => {
console.error("Error connecting to MongoDB:", error);
});


+--------+
| step 5 | 
+--------+

=> Define a schema/collection type for the student details ,A schema defines the structure of the documents youâ€™ll store in the MongoDB collection.
required: true :-The required: true  is used that a  field must need  a value.if the user not enter a value to the field it will be considered as an error.
so user wants to enter value for all fields .

Eg :const studentSchema = new mongoose.Schema({
name: { type: String, required: true },
email: { type: String, required: true },
password: { type: String, required: true },
});


+--------+
| step 6 | 
+--------+
=> Create a model .This model will allow you to interact with the Student collection in MongoDB.
Eg :const Student = mongoose.model("Student", studentSchema);


+--------+
| step 7 | 
+--------+

=>Access the html form page
Eg :app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "form.html"));
});


+--------+
| step 8 | 
+--------+

=>Handle form validation after submission . express-validator libraries checks the input fields for validation:
line 95 check .name must not be empty.
line 96 check . email must be a valid email.
line 97 check . password must be at least 5 characters long.
If validation fails, an error message is returned.
If validation succeeds, a new Student document is created and saved to MongoDB.

Eg :app.post("/signupSubmit", [
check("name").notEmpty().withMessage("Name is required"),
check("email").isEmail().withMessage("Email is invalid"),
check("password").isLength({ min: 5 }).withMessage("Password must be at least 5 characters long"),
], async (req, res) => {
const errors = validationResult(req);
if (!errors.isEmpty()) {
  return res.status(400).json({ errors: errors.array() });
}


+--------+
| step 9 | 
+--------+
 =>Create a New  Document: If validation passes, create a new student document.

const newStudent = new Student({
    name: req.body.name,
    email: req.body.email,
    password: req.body.password,
  });

  try {
    await newStudent.save();
    res.send("Thank you for signing up! Your data has been saved.");
  } catch (error) {
    console.error("Error saving data:", error);
    res.status(500).send("An error occurred while saving your data.");
  }
});


+---------------------------------------------------+
| Step 8 and Step 9 = Can be written in Single Step | 
+---------------------------------------------------+

app.post("/signupSubmit", [
  check("name").notEmpty().withMessage("Name is required"),
  check("email").isEmail().withMessage("Email is invalid"),
  check("password").isLength({ min: 5 }).withMessage("Password must be at least 5 characters long"),
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  const newStudent = new Student({
    name: req.body.name,
    email: req.body.email,
    password: req.body.password,
  });

  try {
    await newStudent.save();
    res.send("Thank you for signing up! Your data has been saved.");
  } catch (error) {
    console.error("Error saving data:", error);
    res.status(500).send("An error occurred while saving your data.");
  }
});


+---------+
| step 10 | 
+---------+

=> This starts your Express server on http://localhost:3000.

Eg :app.listen(3000, () => {
    console.log("Server is running on http://localhost:3000");
  });